Sophera UX/UI Implementation Plan (Bit by Bit)
Objective: Provide granular steps for implementing frontend UX/UI changes for Sophera, intended as a detailed guide if issues arise during chunk-based implementation.
Target Audience: Replit Agent
Chunk 1: Rebranding & Core Layout/Theme
* Bit 1.1: Rename: Search and replace "Thrive" with "Sophera" in all visible text labels, titles, and comments within the React components (.tsx files).
* Bit 1.2: Update Assets: Replace any logo image files (Thrive.png?) with a new "Sophera" logo asset. Update import paths if necessary.
* Bit 1.3: Define Theme Variables: In a global CSS file (e.g., index.css, theme.css) or a theme provider context (if using libraries like Material UI or Chakra UI), define CSS variables for the new color palette (primary blues/greens, warm neutrals, accents) and font family (e.g., Inter).
* Bit 1.4: Apply Global Styles: Ensure the base styles (body background, default text color, primary font) use the new theme variables.
* Bit 1.5: Refactor Layout.tsx: Modify the main layout component. Remove existing navigation.
* Bit 1.6: Implement Bottom Tab Bar (Mobile): Create a BottomNavBar.tsx component. Use icons and text labels for core sections (Today, My Journey, Understand, Connect & Hope). Implement routing logic (e.g., using react-router-dom) to switch views when tabs are tapped. Style according to the theme. Conditionally render this component based on screen size (hide on larger screens).
* Bit 1.7: Implement Sidebar (Desktop): Create a Sidebar.tsx component. Use icons and text labels for core sections. Implement routing logic. Style according to the theme. Conditionally render this component based on screen size (show on larger screens).
* Bit 1.8: Test Responsiveness: Verify that the correct navigation (bottom tab or sidebar) appears at different screen widths and that the main content area adjusts appropriately.
Chunk 2: Redesign "Today" Dashboard
* Bit 2.1: Create/Modify Component: Create src/pages/TodayDashboard.tsx or modify the existing home page component.
* Bit 2.2: Basic Layout: Use Flexbox or Grid to create a simple, single-column layout for mobile, potentially expanding for larger screens. Apply theme background colors/padding.
* Bit 2.3: Greeting Component: Create a small component Greeting.tsx that displays "Good morning/afternoon/evening, [User Name]". Fetch user name from context or state.
* Bit 2.4: "Today's Focus" Component: Create TodaysFocus.tsx.
   * Add state to hold focus items (e.g., useState<PlanItem[]>([])).
   * Use useEffect to call a new backend API endpoint (/api/users/:userId/plan-items/today) on component mount to fetch 1-3 relevant plan items for the current day.
   * Render the fetched items concisely (e.g., "10:00 AM: Take [Medication Name]", "2:00 PM: Appointment with Dr. Smith"). Include links to view full plan details.
   * Display a loading state while fetching. Handle errors gracefully.
* Bit 2.5: Journal Prompt Component: Create JournalPrompt.tsx. Display a simple question (e.g., "How are you feeling today?") with a button/link labeled "Add Journal Entry" that navigates to the "My Journal" input view.
* Bit 2.6: "Hope Snippet" Component: Create HopeSnippet.tsx. Initially, display a static quote or message. (Fetching dynamic content can be added later). Style subtly.
* Bit 2.7: Assemble Dashboard: Combine Greeting, TodaysFocus, JournalPrompt, and HopeSnippet components within TodayDashboard.tsx. Ensure proper spacing and styling.
Chunk 3: Implement "My Journey" Section (Plan & Journal UI)
* Bit 3.1: Create Page Component: Create src/pages/MyJourneyPage.tsx. Implement basic structure, perhaps using tabs or segments to switch between "My Plan" and "My Journal" views.
* Bit 3.2: "My Plan" - Data Fetching: In the "My Plan" view component (MyPlanView.tsx?), use useEffect to call the backend endpoint (/api/users/:userId/plan-items) to fetch all plan items. Store in state. Add loading/error states.
* Bit 3.3: "My Plan" - List View: Create PlanListView.tsx. Map over the fetched plan items and render each item clearly (name, details, schedule). Include Edit/Delete buttons. Implement API calls for delete.
* Bit 3.4: "My Plan" - Calendar View: Create PlanCalendarView.tsx. Use a calendar library (e.g., react-big-calendar, react-calendar). Populate the calendar with plan items based on their dates/schedules. Clicking an item could show details.
* Bit 3.5: "My Plan" - Add/Edit Form: Create PlanItemForm.tsx (potentially used in a modal). Include inputs for name, category, details, dates, schedule. Implement form state management. On submit, call the appropriate backend API endpoint (POST for add, PUT for edit).
* Bit 3.6: "My Plan" - Check-off: Add a checkbox or tappable element to each plan item in the List/Calendar view. On interaction, call a backend API endpoint (e.g., PUT /api/users/:userId/plan-items/:itemId/status) to update the item's status to "completed" for that instance/day. Provide visual feedback.
* Bit 3.7: "My Journal" - Input Form: Create JournalInputForm.tsx. Include UI elements: sliders for mood/energy (e.g., 1-10), selectable list/tags for common symptoms, severity rating input (e.g., 0-5 scale) for selected symptoms, text areas for diet notes and general notes.
* Bit 3.8: "My Journal" - Save Logic: On form submit, gather data from the input form state and call the backend API endpoint (POST /api/users/:userId/journal-logs) to save the entry. Provide confirmation feedback.
* Bit 3.9: "My Journal" - Display View: Create JournalHistoryView.tsx. Fetch past journal logs (e.g., /api/users/:userId/journal-logs?limit=30) using useEffect. Display entries chronologically in a readable format.
* Bit 3.10: Trend Charts: Create TrendCharts.tsx. Fetch journal log data. Use a charting library (e.g., Recharts) to render simple line charts for mood, energy, and selected symptom severity over time.
(Continue similar granular breakdown for Chunks 4, 5, 6, 7, and 8, detailing specific component creation, state management, API call integration, routing, styling, and accessibility attributes for the Understand, Explore, Connect & Hope, and Caregiver View sections, as well as final polishing steps.)