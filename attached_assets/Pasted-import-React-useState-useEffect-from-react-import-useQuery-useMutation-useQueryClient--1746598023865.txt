import React, { useState, useEffect } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Switch } from "@/components/ui/switch";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { User } from "@shared/schema";
import { 
  Save, 
  User as UserIcon, 
  Bell, 
  Eye, 
  Lock, 
  Share2,
  Settings,
  BookOpen,
  MessageSquare
} from "lucide-react";

// Form schema for profile update
const profileSchema = z.object({
  displayName: z.string().min(2, "Name must be at least 2 characters."),
  diagnosis: z.string().optional(),
  diagnosisStage: z.string().optional(),
  diagnosisDate: z.string().optional(),
  address: z.string().optional(),
});

// Form schema for preferences update
const preferencesSchema = z.object({
  emailNotifications: z.boolean(),
  researchUpdates: z.boolean(),
  clinicalTrialAlerts: z.boolean(),
  dataUsage: z.boolean(),
});

// Type for user preferences
export type UserPreferences = {
  emailNotifications: boolean;
  researchUpdates: boolean;
  clinicalTrialAlerts: boolean;
  dataUsage: boolean;
};

// Extend the User type to include preferences
declare module '@shared/schema' {
  interface User {
    preferences?: UserPreferences;
  }
}

export default function Preferences() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [activeTab, setActiveTab] = useState("profile");
  
  // Fetch user pro