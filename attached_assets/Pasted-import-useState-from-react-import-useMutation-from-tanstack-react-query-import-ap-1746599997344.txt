import { useState } from 'react';
import { useMutation } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { Loader2, AlertTriangle, Plus, X, Activity, Info as InfoIcon } from 'lucide-react';
import SideEffectProfile, { SideEffectProfile as SideEffectProfileType } from '@/components/SideEffectProfile';

// Patient characteristics schema for side effect analysis
const patientSideEffectSchema = z.object({
  treatmentName: z.string().min(1, 'Treatment name is required'),
  age: z.string().optional().transform(val => val ? parseInt(val, 10) : undefined),
  gender: z.string().optional(),
  performanceStatus: z.string().optional(),
  height: z.string().optional().transform(val => val ? parseInt(val, 10) : undefined),
  weight: z.string().optional().transform(val => val ? parseInt(val, 10) : undefined),
  smokingStatus: z.string().optional(),
  alcoholUse: z.string().optional(),
  comorbidities: z.array(z.string()).optional(),
  allergies: z.array(z.string()).optional(),
  currentMedications: z.array(z.string()).optional(),
  priorAdverseReactions: z.array(z.string()).optional()
});

type PatientSideEffectFormData = z.infer<typeof patientSideEffectSchema>;

interface SideEffectAnalyzerProps {
  inTabView?: boolean;
}

const SideEffectAnalyzer = ({ inTabView = false }: SideEffectAnalyzerProps) => {
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState<string>('patient-info');
  const [sideEffectProfile, setSideEffectProfile] = useState<SideEffectProfileType | null>(null);
  
  // For dynamic fields (comorbidities, medications, etc.)
  const [newComorbidity, setNewComorbidity] = useState<string>('');
  const [newAllergy, setNewAllergy] = useState<string>('');
  const [newMedication, setNewMedication] = useState<string>('');
  const [newAdverseReaction, setNewAdverseReaction] = useState<string>('');

  // Form setup
  const form = useForm<PatientSideEffectFormData>({
    resolver: zodResolver(patientSideEffectSchema),
    defaultValues: {
      treatmentName: '',
      age: undefined,
      gender: undefined,
      performanceStatus: undefined,
      height: undefined,
      weight: undefined,
      smokingStatus: undefined,
      alcoholUse: undefined,
      comorbidities: [],
      allergies: [],
      currentMedications: [],
      priorAdverseReactions: []
    }
  });
  
  // Helpful tips for users
  const helpfulTips = [
    "The more information you provide, the more accurate and personalized the side effect analysis will be.",
    "Even if you don't know all the answers, provide as much as you feel comfortable sharing.",
    "Your personal information is used only for this analysis and is not shared or stored.",
    "Understanding potential side effects before starting treatment can help you prepare and feel more in control.",
    "You can save this analysis to share with your healthcare team."
  ];

  // Side effect analysis mutation
  const analyzeMutation = useMutation({
    mutationFn: async (patientData: PatientSideEffectFormData) => {
      const { treatmentName, ...patientCharacteristics } = patientData;
      
      return apiRequest<SideEffectProfileType>('/api/treatments/side-effects', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          treatmentName, 
          patientCharacteristics 
        }),
      });
    },
    onSuccess: (data) => {
      setSideEffectProfile(data);
      setActiveTab('results');
      toast({
        title: "Side effect analysis complete",
        description: `Analysis of potential side effects for ${data.treatmentName} has been completed.`,
      });
    },
    onError: (error) => {
      toast({
        title: "Analysis failed",
        description: error instanceof Error ? error.message : "Failed to analyze side effects.",
        variant: "destructive",
      });
    }
  });

  // Submit handler
  const handleSubmit = (data: PatientSideEffectFormData) => {
    analyzeMutation.mutate(data);
  };

  // Handlers for dynamic fields
  const addComorbidity = () => {
    if (newComorbidity && newComorbidity.trim()) {
      const currentValues = form.getValues('comorbidities') || [];
      form.setValue('comorbidities', [...currentValues, newComorbidity.trim()]);
      setNewComorbidity('');
    }
  };

  const removeComorbidity = (index: number) => {
    const currentValues = form.getValues('comorbidities') || [];
    form.setValue('comorbidities', currentValues.filter((_, i) => i !== index));
  };

  const addAllergy = () => {
    if (newAllergy && newAllergy.trim()) {
      const currentValues = form.getValues('allergies') || [];
      form.setValue('allergies', [...currentValues, newAllergy.trim()]);
      setNewAllergy('');
    }
  };

  const removeAllergy = (index: number) => {
    const currentValues = form.getValues('allergies') || [];
    form.setValue('allergies', currentValues.filter((_, i) => i !== index));
  };

  const addMedication = () => {
    if (newMedication && newMedication.trim()) {
      const currentValues = form.getValues('currentMedications') || [];
      form.setValue('currentMedications', [...currentValues, newMedication.trim()]);
      setNewMedication('');
    }
  };

  const removeMedication = (index: number) => {
    const currentValues = form.getValues('currentMedications') || [];
    form.setValue('currentMedications', currentValues.filter((_, i) => i !== index));
  };

  const addAdverseReaction = () => {
    if (newAdverseReaction && newAdverseReaction.trim()) {
      const currentValues = form.getValues('priorAdverseReactions') || [];
      form.setValue('priorAdverseReactions', [...currentValues, newAdverseReaction.trim()]);
      setNewAdverseReaction('');
    }
  };

  const removeAdverseReaction = (index: number) => {
    const currentValues = form.getValues('priorAdverseReactions') || [];
    form.setValue('priorAdverseReactions', currentValues.filter((_, i) => i !== index));
  };

  return (
    <div className="container mx-auto py-8 px-4 md:px-6 lg:px-8 max-w-6xl">
      {!inTabView && (
        <div className="mb-8">
          <h1 className="text-3xl md:text-4xl font-extrabold tracking-tight text-sophera-text-heading flex items-center">
            <Activity className="h-8 w-8 mr-3 text-sophera-brand-primary" />
            Interaction Checker
          </h1>
          <p className="mt-3 text-lg text-sophera-text-body">
            Learn about potential side effects tailored to your specific health profile and treatment plan
          </p>
        </div>
      )}
      
      <Card className="bg-sophera-brand-primary-light border-sophera-brand-primary/20 rounded-sophera-card shadow-lg mb-8">
        <CardHeader className="pb-4">
          <CardTitle className="text-xl font-semibold text-sophera-text-heading">Understanding Your Treatment Journey</CardTitle>
          <CardDescription className="text-sophera-text-body pt-1">
            Knowing what to expect helps you prepare mentally and physically for treatment.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {helpfulTips.map((tip, index) => (
              <div key={index} className="flex items-start p-4 bg-white rounded-sophera-input border border-sophera-border-subtle shadow-sm">
                <div className="mr-3 mt-0.5">
                  <InfoIcon className="h-5 w-5 text-sophera-accent-secondary" />
                </div>
                <p className="text-sm text-sophera-text-body">{tip}</p>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
      
      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="h-auto p-1.5 bg-sophera-gradient-start rounded-sophera-button mb-6 gap-1.5">
          <TabsTrigger 
            value="patient-info" 
            className="text-base data-[state=active]:bg-white data-[state=active]:text-sophera-brand-primary data-[state=active]:shadow-md rounded-sophera-input h-11 flex items-center gap-1.5"
          >
            Your Health Profile
          </TabsTrigger>
          <TabsTrigger 
            value="results" 
            disabled={!sideEffectProfile}
            className="text-base data-[state=active]:bg-white data-[state=active]:text-sophera-brand-primary data-[state=active]:shadow-md rounded-sophera-input h-11 flex items-center gap-1.5"
          >
            Personalized Insights
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="patient-info" className="mt-0">
          <Card className="bg-white border-sophera-border-primary rounded-sophera-card shadow-lg">
            <CardHeader className="pb-4">
              <CardTitle className="text-xl font-semibold text-sophera-text-heading">Side Effect Risk Analysis</CardTitle>
              <CardDescription className="text-sophera-text-body pt-1">
                Enter patient information and treatment details to analyze potential side effects.
                More complete information leads to more accurate side effect predictions.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Form {...form}>
                <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-8">
                  {/* Treatment Information */}
                  <div className="space-y-5">
                    <h3 className="text-lg font-semibold text-sophera-text-heading">Treatment Information</h3>
                    
                    <FormField
                      control={form.control}
                      name="treatmentName"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sophera-text-heading font-medium">Treatment Name *</FormLabel>
                          <FormControl>
                            <Input 
                              placeholder="e.g., Cisplatin + 5-FU Chemotherapy" 
                              {...field}
                              className="border-sophera-border-subtle rounded-sophera-input focus:border-sophera-brand-primary focus:ring-sophera-brand-primary-focusRing" 
                            />
                          </FormControl>
                          <FormDescription className="text-sophera-text-subtle">
                            Specify the treatment to analyze for side effects
                          </FormDescription>
                          <FormMessage className="text-sophera-error" />
                        </FormItem>
                      )}
                    />
                  </div>

                  {/* Basic Patient Information */}
                  <div className="space-y-5">
                    <h3 className="text-lg font-semibold text-sophera-text-heading">Basic Patient Information</h3>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                      <FormField
                        control={form.control}
                        name="age"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-sophera-text-heading font-medium">Age</FormLabel>
                            <FormControl>
                              <Input 
                                type="number" 
                                placeholder="65" 
                                {...field}
                                className="border-sophera-border-subtle rounded-sophera-input focus:border-sophera-brand-primary focus:ring-sophera-brand-primary-focusRing"  
                              />
                            </FormControl>
                            <FormMessage className="text-sophera-error" />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="gender"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-sophera-text-heading font-medium">Gender</FormLabel>
                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                              <FormControl>
                                <SelectTrigger className="border-sophera-border-subtle rounded-sophera-input focus:border-sophera-brand-primary focus:ring-sophera-brand-primary-focusRing">
                                  <SelectValue placeholder="Select" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent className="bg-white border-sophera-border-subtle rounded-sophera-input">
                                <SelectItem value="male">Male</SelectItem>
                                <SelectItem value="female">Female</SelectItem>
                                <SelectItem value="other">Other</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage className="text-sophera-error" />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="performanceStatus"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-sophera-text-heading font-medium">ECOG Performance Status</FormLabel>
                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                              <FormControl>
                                <SelectTrigger className="border-sophera-border-subtle rounded-sophera-input focus:border-sophera-brand-primary focus:ring-sophera-brand-primary-focusRing">
                                  <SelectValue placeholder="Select" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent className="bg-white border-sophera-border-subtle rounded-sophera-input">
                                <SelectItem value="0">0 - Fully active</SelectItem>
                                <SelectItem value="1">1 - Restricted but ambulatory</SelectItem>
                                <SelectItem value="2">2 - Ambulatory, capable of self-care</SelectItem>
                                <SelectItem value="3">3 - Limited self-care</SelectItem>
                                <SelectItem value="4">4 - Completely disabled</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage className="text-sophera-error" />
                          </FormItem>
                        )}
                      />
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="height"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-sophera-text-heading font-medium">Height (cm)</FormLabel>
                            <FormControl>
                              <Input 
                                type="number" 
                                placeholder="175" 
                                {...field}
                                className="border-sophera-border-subtle rounded-sophera-input focus:border-sophera-brand-primary focus:ring-sophera-brand-primary-focusRing"
                              />
                            </FormControl>
                            <FormMessage className="text-sophera-error" />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="weight"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-sophera-text-heading font-medium">Weight (kg)</FormLabel>
                            <FormControl>
                              <Input 
                                type="number" 
                                placeholder="70" 
                                {...field}
                                className="border-sophera-border-subtle rounded-sophera-input focus:border-sophera-brand-primary focus:ring-sophera-brand-primary-focusRing"
                              />
                            </FormControl>
                            <FormMessage className="text-sophera-error" />
                          </FormItem>
                        )}
                      />
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="smokingStatus"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-sophera-text-heading font-medium">Smoking Status</FormLabel>
                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                              <FormControl>
                                <SelectTrigger className="border-sophera-border-subtle rounded-sophera-input focus:border-sophera-brand-primary focus:ring-sophera-brand-primary-focusRing">
                                  <SelectValue placeholder="Select" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent className="bg-white border-sophera-border-subtle rounded-sophera-input">
                                <SelectItem value="never">Never smoker</SelectItem>
                                <SelectItem value="former">Former smoker</SelectItem>
                                <SelectItem value="current">Current smoker</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage className="text-sophera-error" />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="alcoholUse"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-sophera-text-heading font-medium">Alcohol Use</FormLabel>
                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                              <FormControl>
                                <SelectTrigger className="border-sophera-border-subtle rounded-sophera-input focus:border-sophera-brand-primary focus:ring-sophera-brand-primary-focusRing">
                                  <SelectValue placeholder="Select" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent className="bg-white border-sophera-border-subtle rounded-sophera-input">
                                <SelectItem value="none">None</SelectItem>
                                <SelectItem value="occasional">Occasional (1-2 drinks/week)</SelectItem>
                                <SelectItem value="moderate">Moderate (3-7 drinks/week)</SelectItem>
                                <SelectItem value="heavy">Heavy (7+ drinks/week)</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage className="text-sophera-error" />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>

                  {/* Medical History */}
                  <div className="space-y-5">
                    <h3 className="text-lg font-semibold text-sophera-text-heading">Medical History</h3>
                    
                    {/* Comorbidities */}
                    <FormField
                      control={form.control}
                      name="comorbidities"
                      render={() => (
                        <FormItem>
                          <FormLabel className="text-sophera-text-heading font-medium">Comorbidities</FormLabel>
                          <div className="flex items-center gap-2 mb-2">
                            <Input 
                              value={newComorbidity}
                              onChange={e => setNewComorbidity(e.target.value)}
                              placeholder="e.g., Diabetes, Hypertension"
                              className="flex-grow border-sophera-border-subtle rounded-sophera-input focus:border-sophera-brand-primary focus:ring-sophera-brand-primary-focusRing"
                            />
                            <Button 
                              type="button" 
                              variant="outline" 
                              size="sm" 
                              onClick={addComorbidity}
                              className="border-sophera-brand-primary text-sophera-brand-primary hover:bg-sophera-brand-primary-light rounded-sophera-button"
                            >
                              <Plus className="h-4 w-4" />
                            </Button>
                          </div>
                          <div className="flex flex-wrap gap-2 mt-3">
                            {form.watch('comorbidities')?.map((item, index) => (
                              <Badge key={index} variant="secondary" className="bg-sophera-gradient-start text-sophera-text-heading border-none rounded-md gap-1 px-3 py-1.5">
                                {item}
                                <button 
                                  type="button" 
                                  onClick={() => removeComorbidity(index)}
                                  className="inline-flex ml-1 text-sophera-text-heading hover:text-sophera-text-heading/80"
                                >
                                  <X className="h-3 w-3" />
                                </button>
                              </Badge>
                            ))}
                          </div>
                          <FormDescription className="text-sophera-text-subtle mt-2">
                            Add any existing medical conditions
                          </FormDescription>
                          <FormMessage className="text-sophera-error" />
                        </FormItem>
                      )}
                    />
                    
                    {/* Allergies */}
                    <FormField
                      control={form.control}
                      name="allergies"
                      render={() => (
                        <FormItem>
                          <FormLabel className="text-sophera-text-heading font-medium">Allergies</FormLabel>
                          <div className="flex items-center gap-2 mb-2">
                            <Input 
                              value={newAllergy}
                              onChange={e => setNewAllergy(e.target.value)}
                              placeholder="e.g., Penicillin, Sulfa drugs"
                              className="flex-grow border-sophera-border-subtle rounded-sophera-input focus:border-sophera-brand-primary focus:ring-sophera-brand-primary-focusRing"
                            />
                            <Button 
                              type="button" 
                              variant="outline" 
                              size="sm" 
                              onClick={addAllergy}
                              className="border-sophera-brand-primary text-sophera-brand-primary hover:bg-sophera-brand-primary-light rounded-sophera-button"
                            >
                              <Plus className="h-4 w-4" />
                            </Button>
                          </div>
                          <div className="flex flex-wrap gap-2 mt-3">
                            {form.watch('allergies')?.map((item, index) => (
                              <Badge key={index} variant="secondary" className="bg-sophera-accent-secondary/20 text-sophera-accent-secondary border-none rounded-md gap-1 px-3 py-1.5">
                                {item}
                                <button 
                                  type="button" 
                                  onClick={() => removeAllergy(index)}
                                  className="inline-flex ml-1 text-sophera-accent-secondary hover:text-sophera-accent-secondary/80"
                                >
                                  <X className="h-3 w-3" />
                                </button>
                              </Badge>
                            ))}
                          </div>
                          <FormMessage className="text-sophera-error" />
                        </FormItem>
                      )}
                    />
                    
                    {/* Current Medications */}
                    <FormField
                      control={form.control}
                      name="currentMedications"
                      render={() => (
                        <FormItem>
                          <FormLabel className="text-sophera-text-heading font-medium">Current Medications</FormLabel>
                          <div className="flex items-center gap-2 mb-2">
                            <Input 
                              value={newMedication}
                              onChange={e => setNewMedication(e.target.value)}
                              placeholder="e.g., Metformin, Lisinopril"
                              className="flex-grow border-sophera-border-subtle rounded-sophera-input focus:border-sophera-brand-primary focus:ring-sophera-brand-primary-focusRing"
                            />
                            <Button 
                              type="button" 
                              variant="outline" 
                              size="sm" 
                              onClick={addMedication}
                              className="border-sophera-brand-primary text-sophera-brand-primary hover:bg-sophera-brand-primary-light rounded-sophera-button"
                            >
                              <Plus className="h-4 w-4" />
                            </Button>
                          </div>
                          <div className="flex flex-wrap gap-2 mt-3">
                            {form.watch('currentMedications')?.map((item, index) => (
                              <Badge key={index} variant="secondary" className="bg-sophera-accent-tertiary/20 text-sophera-accent-tertiary border-none rounded-md gap-1 px-3 py-1.5">
                                {item}
                                <button 
                                  type="button" 
                                  onClick={() => removeMedication(index)}
                                  className="inline-flex ml-1 text-sophera-accent-tertiary hover:text-sophera-accent-tertiary/80"
                                >
                                  <X className="h-3 w-3" />
                                </button>
                              </Badge>
                            ))}
                          </div>
                          <FormMessage className="text-sophera-error" />
                        </FormItem>
                      )}
                    />
                    
                    {/* Prior Adverse Reactions */}
                    <FormField
                      control={form.control}
                      name="priorAdverseReactions"
                      render={() => (
                        <FormItem>
                          <FormLabel className="text-sophera-text-heading font-medium">Prior Adverse Reactions</FormLabel>
                          <div className="flex items-center gap-2 mb-2">
                            <Input 
                              value={newAdverseReaction}
                              onChange={e => setNewAdverseReaction(e.target.value)}
                              placeholder="e.g., Nausea with previous chemotherapy"
                              className="flex-grow border-sophera-border-subtle rounded-sophera-input focus:border-sophera-brand-primary focus:ring-sophera-brand-primary-focusRing"
                            />
                            <Button 
                              type="button" 
                              variant="outline" 
                              size="sm" 
                              onClick={addAdverseReaction}
                              className="border-sophera-brand-primary text-sophera-brand-primary hover:bg-sophera-brand-primary-light rounded-sophera-button"
                            >
                              <Plus className="h-4 w-4" />
                            </Button>
                          </div>
                          <div className="flex flex-wrap gap-2 mt-3">
                            {form.watch('priorAdverseReactions')?.map((item, index) => (
                              <Badge key={index} variant="secondary" className="bg-sophera-error-light text-sophera-error border-none rounded-md gap-1 px-3 py-1.5">
                                {item}
                                <button 
                                  type="button" 
                                  onClick={() => removeAdverseReaction(index)}
                                  className="inline-flex ml-1 text-sophera-error hover:text-sophera-error/80"
                                >
                                  <X className="h-3 w-3" />
                                </button>
                              </Badge>
                            ))}
                          </div>
                          <FormDescription className="text-sophera-text-subtle mt-2">
                            List any previous adverse reactions to medications or treatments
                          </FormDescription>
                          <FormMessage className="text-sophera-error" />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="pt-4">
                    <Button 
                      type="submit" 
                      className="w-full bg-sophera-brand-primary hover:bg-sophera-brand-primary-dark text-white rounded-sophera-button py-3 h-auto text-base"
                      disabled={analyzeMutation.isPending}
                    >
                      {analyzeMutation.isPending ? (
                        <>
                          <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                          Analyzing Side Effects...
                        </>
                      ) : (
                        <>
                          <AlertTriangle className="mr-2 h-5 w-5" />
                          Analyze Side Effects
                        </>
                      )}
                    </Button>
                  </div>
                </form>
              </Form>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="results" className="mt-0">
          <Card className="bg-white border-sophera-border-primary rounded-sophera-card shadow-lg">
            <CardContent className="pt-8 px-6 md:px-8">
              {!sideEffectProfile ? (
                <div className="text-center py-16">
                  <p className="text-sophera-text-subtle">No side effect analysis data available. Enter treatment and patient information to generate analysis.</p>
                </div>
              ) : (
                <SideEffectProfile profile={sideEffectProfile} />
              )}
            </CardContent>
            <CardFooter className="flex justify-between py-6 px-6 md:px-8 border-t border-sophera-border-subtle">
              <Button 
                variant="outline" 
                onClick={() => setActiveTab('patient-info')}
                className="border-sophera-border-subtle hover:bg-sophera-bg-subtle hover:text-sophera-text-heading rounded-sophera-button"
              >
                Back to Patient Information
              </Button>
              <Button 
                variant="default" 
                onClick={() => {
                  // Reset form and go back to patient info tab
                  form.reset();
                  setSideEffectProfile(null);
                  setActiveTab('patient-info');
                }}
                className="bg-sophera-brand-primary hover:bg-sophera-brand-primary-dark text-white rounded-sophera-button"
              >
                Start New Analysis
              </Button>
            </CardFooter>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default SideEffectAnalyzer;